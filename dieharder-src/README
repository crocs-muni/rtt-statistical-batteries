# DieHarder Statistical Tests Suite

DieHarder tests with modern CMake build system.

## Original author contact info
Robert G. Brown	
Duke University Dept. of Physics, Box 90305
Durham, N.C. 27708-0305
Phone: 1-919-660-2567  
Fax: 919-660-2525  
Email: rgb@phy.duke.edu
URL: http://www.phy.duke.edu/~rgb

## MUNI contributions
Modified Dieharder source code capable of psample value output.
Modified files are dieharder/output.h and dieharder/output.c.

### Running notes
You can make sure you are using correctly built binary by using ./dieharder -F option, last line of output should be:
```
65536	 psample_values
```
When testing a file, use your usuall output flags (-D option) and add 65536 to them, values of psamples will be in output.
Each value is on one line and bounded by 4 plus signs.

### Example output
```
$./bin/dieharder -g 201 -d 0 -D 66047 -p 10 -f rand.bin

#=============================================================================#
#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
#=============================================================================#
    rng_name    |           filename             |
 file_input_raw|                        rand.bin|
#=============================================================================#
        test_name   |ntup| tsamples |psamples|  p-value |Assessment
#=============================================================================#
   diehard_birthdays|   0|       100|      10|0.07548333|  PASSED  
#=============================================================================#
#                          Values of test p-values                            #
#=============================================================================#
++++0.47662875++++
++++0.50094008++++
++++0.57254425++++
++++0.59016938++++
++++0.71121384++++
++++0.71690598++++
++++0.74037972++++
++++0.76648245++++
++++0.84489929++++
++++0.86872270++++
#=============================================================================#
```

## Dependencies
This project has only one library dependency: GNU Scientific Library (GSL).
It is distributed as a standard Linux package and you can search the web for installation instructions (keep in mind that you also need the development versions - "-dev" suffix on Debian-based distros / "-devel" suffix on RedHat-based distros).

When on Windows+MinGW, use MSYS2 MSYS shell and run:
```bash
pacman -Ss gsl # prints out all available versions
# pick the one that fits your toolchain and install, i.e:
pacman -S mingw-w64-x86_64-gsl # version
```

## Compilation
CMake build system makes compilation much easier.
However, the build system only compiles binaries (old autoconf supported RPM, docs, etc.).
### Prerequisites
- CMake 3.17 or higher
- [Ninja generator](https://ninja-build.org/) - `highly recommended`
- C compiler
- Conan 1.48.1 or higher (optional, error-prone, not recommended)

### Windows MinGW
Install additional packages:
```bash
pacman -S libtool m4 mingw-w64-x86_64-gsl
```

### Conan installation
Conan integration was introduced to this project only for making development easier but it is highly recommended to install the GSL natively (with apt/yum/dnf/pacman).
If you're not familiar with conan, it's better for you to skip this part.
Assuming correct installation of Python3, PIP and GCC compiler:
(Note: when using MinGW use `MSYS2 MSYS` shell)
```bash
pip3 install conan
# the following step should be configured by default:
conan remote add conancenter https://center.conan.io
# you can verify that you have the correct remote by running this command:
conan remote list
# output of the command:
# conancenter: https://center.conan.io [Verify SSL: True]
```

The rest of the installation is platform-specific
On Linux:
```bash
# detect a default profile
conan profile new --detect default
# and configure C++11 ABI
conan profile update settings.compiler.libcxx=libstdc++11 default
```
On Windows+MinGW:
(Note: use your toolchain shell, e.g. `MSYS2 MinGW 64` to execute the following steps)
```bash
# detect a default profile
CC=gcc conan profile new --detect default
# and configure C++11 ABI
conan profile update settings.compiler.libcxx=libstdc++11 default
```
Troubleshooting:
- if your MinGW toolchain is not GCC-based (can be Clang based), you probably want to set CC environment variable to `CC=clang`
- In case the conancenter remote changes, you can search for right command [here](https://docs.conan.io/en/latest/uploading_packages/remotes.html)
- If something goes wrong with the Conan installation, please, follow the official [Conan docs](https://docs.conan.io/en/latest/)

### Tested C compilers
Linux - GCC 7.5.0, GCC 8.4.0, Clang 10.0.0
Windows - MinGW64 GCC 11.3.0
Windows - MSVC2019 `does not work` due to some header files used by the project (i.e. sys/time.h)

### Steps
```bash
cd <folder-with-this-readme>
mkdir build
cd build
# on Linux, run this additional step:
conan install .. -b missing
# -G Ninja can be omitted
cmake -G Ninja .. # for static libdieharder or:
cmake -DBUILD_SHARED_LIBS=ON .. # for shared libdieharder
cmake --build .
```

## Versioning
Versioning in dieharder has a very specific meaning.
The major number is bumped when a major project milestone is reached OR when a major fundamental redesign takes place (something that happens roughly 3-5 times over the lifetime of any given project).
The first minor is the number of tests built into the current snapshot.
The second minor is bumped when e.g. a major change occurs within a release -- a bug is fixed, a new feature (but not a new test) is added.
Release is used to track micro/testing releases in the development cycle.
Basically, proposed bugfixes that will eventually become bumps in the second minor number.

In this way one can always see if dieharder is likely to have major new
features or bugfixes in it relative to your current version.

## Notes About the Tests in Dieharder
Dieharder is original code written by and Copyright Robert G. Brown
(with different code modules written over the period 2003-present).  The
tests included (or expected to be included in the future) in dieharder,
are, however, derived from descriptions from several places.

  * Diehard, a famous suite of random number tests written over many
years by George Marsaglia.  The original Diehard sources (written in
Fortran) are (of course) Copyright George Marsaglia according to the
Berne convention, where authors retain copyright with or without a
notice in any original work.  The original Diehard code written by
Marsaglia did not include a copyright notice or an explicit license in
or with the sources that have been made publically available on the web
for many years.  When contacted, Dr. Marsaglia has indicated his wish to
restrict commercial usage of his code and permit only academic/research
related use.  For this reason the the algorithms are fully
re-implemented, in original code, in dieharder to keep authorship and
GPL licensing issues clear.  However, all diehard-equivalent tests are
clearly labelled as such and academically attributed to Dr. Marsaglia.

  * The National Institute of Standards and Technology (NIST)
Statistical Test Suite (STS) as described in publication SP800-22b.
Although this test suite was developed with government support and is
explicitly in the public domain, and is available in C source.  There is
some overlap between STS and Diehard -- for example, both have binary
matrix rank tests -- but the STS focusses primarily on bitlevel
randomness and the suitability of a random number generator for use in
cryptographic applications.  The tests described in SP800-22b that are
implemented in dieharder are completely rewritten in original C by
Robert G. Brown to keep copyright and GPL issues clear.  All STS-derived
tests are clearly labelled as such and are academically attributed to
the various authors of the suite (Andrew Rukhin, Juan Soto, James
Nechvatal, Miles Smid, Elaine Barker, Stefan Leigh, Mark Levenson, Mark
Vangel, David Banks, Alan Heckert, James Dray, San Vo).

  * Original tests or timing operations inserted by Robert G. Brown.
Almost any distribution that can be computed on the basis of a source of
random numbers with a derived statistic with known or reliably
measurable statistical properties can serve as a test of random numbers
using the general approach implemented in Diehard, the STS, Dieharder,
and elsewhere.

  * Tests described in Knuth's The Art of Computer Programming.

  * User-contributed tests.

  * Tests described elsewhere in the literature.

In all cases some effort has been made to correctly attribute the
originator of a test algorithm, and if there are any errors in this
regard they will be happily corrected once they are brought to the
attention of the author.

## Development and Experimentation
Dieharder is an open source project for a reason -- it simply is not
possible to trust a test suite of this sort without access to the source
because even a subtle error in the sources or data used to perform a
test will cause the test to return incorrect answers, conceivably to the
detriment of all concerned.  With the source readily available, any user
is free to examine or modify the source for any test and determine
whether or not the test is working and participate in the critical
process whereby academia arrives at a consensus truth.

Also, many individuals may wish to use the general dieharder library to
test their own (software) rngs.  This may well involve adding tests or
modifying individual tests already there, or dieharder defaults.
dieharder is built using [CMake](https://cmake.org/).

### Static vs Shared library
By default, the `libdieharder` is built as a static library.
If you want to build a shared version, use generic CMake switch
`BUILD_SHARED_LIBS` in generate stage (see compilation steps in Compilation section).

## RPM/Dpkg packages
RPM/Dpkg support is temporarily dropped.

## Licensing and Revision Control

Dieharder is (as noted) Copyright Robert G. Brown, 2003-2006.  It has
been kept under revision control (first CVS, more recently Subversion)
since the inception of the process in 2003 and all incremental changes
to the code as it was developed are carefully documented.

Dieharder was deliberately developed to be a GPL project, since
alternative random number test suites were either incomplete with regard
to the span of test possibilities of interest to the author, restricted
or unclear about their licensing restrictions, or both.  In addition, by
integrating from the beginning with the Gnu Scientific Library (which is
a full GPL project with the viral version of the license) it becomes
itself a GPL project in any event.

It is strongly suggested that prospective users of this test read the
terms of the license included with this source distribution in the file
COPYING.  In summary, permission is granted to freely use and modify the
sources and distribute the result or any binary objects derived
therefrom as long as the terms of the GPL are abided by.  These terms
require the preservation of all copyright and license information in the
sources and that the source of any and all revisions to the original
dieharder code be made available upon request to any receivers of a
dieharder binary, among other things.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

If any user of the dieharder program should revise the program in a way
that is likely to be of use to others, they are encouraged to at least
offer to contribute the revision back to the project (subject to the
"editorial" approval of the primary author).  Contact Robert G. Brown to
arrange for such a contribution.
